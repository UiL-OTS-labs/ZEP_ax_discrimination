/******************************************************************************\
FILE:           test_page.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Provides a page object to show to the participant during test trials.
It handles presenting the stimulus and recording the participant's response.


HISTORY:
2012-01-30 TV   Created.

\******************************************************************************/

import std_sound_output_device;


Page test_page
{
    TestItem    item;           // trial control parameters
    color       button_color;   // default button color
    color       pressed_color;  // color of button when pressed.
    
    Timer       button_timer    // timer for displaying buttonpress feedback
    {
        on_event:expire()
        {
            layout.buttons.button1.fill_pattern_color = button_color;
            layout.buttons.button2.fill_pattern_color = button_color;
        }
    }

    init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
        button_color       = layout.buttons.button1.fill_pattern_color;
        pressed_color      = rgbi:100/100/100;
    }

    on_event:key_press()
    {
        // Handle left-shift (same) and right-shift (diff).
        if (input_key == KEY_Shift_L)
        {
            response.process_hit(0, event_time);
            activate_feedback(0, event_time);
        }
        else if (input_key == KEY_Shift_R)
        {
            response.process_hit(1, event_time);
            activate_feedback(1, event_time);
        }
        else {
            handle_special_key(this, input_key, input_modifiers);
        }
    }


    on_event:message()
    {
        // Process button-box message. See setup() below.
        response.process_hit(message_arg, event_time);
        activate_feedback(message_arg, event_time);
    }


    VerticalLayout layout
    {
        init()
        {
            spacing = 50;
            height = 0;     // 0 means as large as possible
        }


        CanvasGadget canvas
        {
            init()
            {
//                fill_pattern_color = TEST_PAGE_STIMULUS_COLOR;
                size = 450, 100;
                offset_x = width / 2;
                offset_y = height / 2;
            }


            CrossShape fixation
            {
                init()
                {
                    radius = 15;
                    line_width = 5;
                    line_pattern_color = color:crimson;
                }
            }

        }
        
        LabelGadget tosoon
        {
            init()
            {
                font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                text = "Pressed too soon";
                text_color = color:red;
                is_visible = false;
            }

            Timer t
            {
                on_event:expire()
                {
                    clear();
                }
            }

            void present()
            {
                is_visible = true;
                t.abort();
                t.start (now() + 500ms);
            }

            void clear ()
            {
                is_visible = false;
                t.abort();
            }
        }


        HorizontalLayout buttons
        {
            init()
            {
                spacing = 50;
                options = LAYOUT_EQUAL_WIDTH;
            }


            ButtonGadget button1
            {
                init()
                {
                    text = "Same";
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 150, 75;
                }


                on_event:activate()
                {
                    response.process_hit(0, event_time);
                    activate_feedback(0, event_time);
                }
            }


            ButtonGadget button2
            {
                init()
                {
                    text = "Different";
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 150, 75;
                }


                on_event:activate()
                {
                    response.process_hit(1, event_time);
                    activate_feedback(1, event_time);
                }
            }
        }


        time start_fixation(time t)
        {
            // Start fixation cross.
            canvas.fixation.start(t, FIXATION_DURATION);

            // Return fixation offset time.
            return canvas.fixation.expected_finish_time;
        }


        void reset()
        {
            full_abort();
        }
    }


    SoundChain stimulus
    {
        dur isi = 0ms;

        // Sound source/producer object.
        SoundSequence seq
        {
            SoundFile clip1 {}
            SoundFile clip2 {}
        }


        // Sound sink/consumer object.
        SoundPlayback playback {}


        time play(time t)
        {
            abort();

            playback.device = sound_output_device;
            seq.clip1.file = stimuli_dir() + "sounds/" + item.sndfn1;
            seq.clip2.file = stimuli_dir() + "sounds/" + item.sndfn2;
            seq.clip1.trailer_duration = isi;

            start(t);
            
            time expected_stim2_on = expected_start_time + seq.clip1.duration;
            return expected_stim2_on;
        }
    }


    Response response
    {
        // Response data.
        int     value;          // response value: 0=same, 1=diff, -1=timeout
        int     rt;             // response time [ms]
        int     correct;        // correct response: 0=no, 1=yes, -1=n.a.


        void clear()
        {
            value = -1;
            rt = -9999;
            correct = -1;
        }


        void process_hit(int val, time t)
        {
            HitType validity = hit(t);

            // Accept the first hit in the response interval and end the 
            // response interval.
            if (validity == HIT_VALID)
            {
                value = val;
                rt = int(reaction_time(0));
                if (item.type1 == item.type2)
                    correct = val == 0; // correct if response is same
                else
                    correct = val != 0; // correct if response is diff

                ignore_remaining_hits();

                stop();
            }
            else if (validity == HIT_TOO_EARLY)
            {
                layout.tosoon.present();
            }
            else if (validity == HIT_TOO_LATE)
            {
                // False alarm. Deal with this if desired.
            }
        }


        on_event:finish()
        {
            real correctness = 0;
            if (num_valid_hits > 0) correctness = correct ? 1 : -1;

            if (!test_page_overlay.start_feedback(this, correctness, 
                    FEEDBACK_DURATION)) 
                done(CONTINUE);
        }

        on_event:message()
        {
            done(CONTINUE);
        }
    }
    
    // button is a zero indexed value
    void activate_feedback(int button, time pressed)
    {
        button++;
        button_timer.abort(); // if it is active cancel it.
        if (button == 1) {
            layout.buttons.button1.fill_pattern_color = pressed_color;
        } else { // button must be two
            layout.buttons.button2.fill_pattern_color = pressed_color;
        }
        button_timer.start(pressed + 250ms);
    }


    // Aborts any ongoing activity on this page and signals the initiator
    // of the trial that we're done.
    void done(int msgid)
    {
        // Just in case; abort presentation if still active.
        layout.reset();
        stimulus.abort();

        signal_target(msgid);   // tell caller we're done
        target = null;

        control.clear_status();
    }


    //==========================================================================


    // Performs preparatory work required before using this page.
    void setup(int ntrials=-1, bool fb=false, bool pr=false, dur isi=0ms)
    {
        test_page_overlay.setup(this);

        // Show or hide prompt.
        test_page_overlay.show_prompt(pr ? 
            "did you hear <i>same</i> or <i>different</i> sounds" : "", 
            true);

        // Enable or disable the progress bar.
        test_page_overlay.show_progress_bar(ntrials);   // disabled if < 0

        // Enable or disable feedback.
        test_page_overlay.enable_feedback(fb);          // disabled if false


        // Enable button-box buttons 0 and 1 for resp. same(0) and diff(1).
        control.target = this;
        control.button_box.disable_buttons();
        control.button_box.enable_button(0, 0); // button 0 means same(0)
        control.button_box.enable_button(2, 1); // button 2 means diff(1)

        // set the stimulus interval for this block.
        stimulus.isi = isi;
    }


    // Performs cleaning up if necessary.
    void cleanup()
    {
        test_page_overlay.cleanup();

        control.button_box.disable_buttons();
        control.target = null;
    }


    // Starts a trial.
    void action(Object caller, TestItem it, time tref, int count=-1)
    {
        // Save the passed trial control parameters.
        item = it;


        // Show this page (if not yet done) and make tref the trial start time.
        tref = test_window1.show_test_page(this, tref + INTERTRIAL_INTERVAL);


        // Reset response data.
        response.clear();
        
        // clear the to soon message
        layout.tosoon.clear();

        // Start fixation symbol.
        time fixoffset = layout.start_fixation(tref);


        // Start stimulus at fixation offset.
        time stimoffset = stimulus.play(fixoffset);


        // Response interval starts at stimulus offset.
        response.start(stimoffset, RESPONSE_DURATION);


        // Update progress counter (if enabled).
        test_page_overlay.update_progress_bar(count);


        // Update status line on control window. Cleared in done() above.
        control.set_status(
            string(item.id) + "  " + 
            string(item.type1) + "  " + 
            string(item.type2) + "  " + 
            string(item.sndfn1) + "  " + 
            string(item.sndfn2));


        // Remember who to signal when the trial is over.
        target = caller;
    }
}
